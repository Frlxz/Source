--[[ 1. KONFIGURASI & STATE MANAGEMENT ]]
local Toggles = {
    AutoFarm = false,
    StunStickAura = false,
    RakeESP = false,
    ScrapESP = false,
    LootBoxESP = false,
    FlareGunESP = false,
    PlayersESP = false,
    PlaceESP = false,
    InfoGUI = false,
    AutoOpenDoor = false,
    FullBright = false,
    AutoOpenLootBox = false,
    NoSlowDown = false,
    UnlockFPS = false,
    NoFallDamage = false,
}

--[[ 2. SERVICES & CORE GAME VARIABLES ]]
-- Services
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local PathfindingService = game:GetService("PathfindingService")

-- Core Game Variables
local LocalPlayer = Players.LocalPlayer
local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

-- Script State Variables
local Rake, lastStunHit = nil, 0
local ActiveESPElements = {}
local InfoGuiInstance, infoGuiUpdateLoop = nil, nil
local isUIInitialized = false -- [FIX] Flag untuk mencegah notif di awal

-- Auto Farm State
local DANGER_DISTANCE = 100
local isCurrentlyFleeing = false
local currentTarget = nil
local lastStatusNotify = 0
local notifyCooldown = 10
local hasSoldToday = false
local blacklistedTargets = {}

-- Original Lighting Settings for FullBright
local originalLighting = { FogEnd = Lighting.FogEnd, OutdoorAmbient = Lighting.OutdoorAmbient, Ambient = Lighting.Ambient, FogColor = Lighting.FogColor }
local colorCorrection = Lighting:FindFirstChildOfClass("ColorCorrectionEffect") or Instance.new("ColorCorrectionEffect", Lighting)
local originalColorCorrection = { Enabled = colorCorrection.Enabled, TintColor = colorCorrection.TintColor, Brightness = colorCorrection.Brightness, Contrast = colorCorrection.Contrast, Saturation = colorCorrection.Saturation }
local isMouseLocked = true

--[[ 3. CORE LIBRARY INITIALIZATION ]]
local Version = "1.6.3"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

--[[ 4. UTILITY FUNCTIONS ]]
-- Fungsi untuk mengirim notifikasi menggunakan WindUI
local function notify(title, content, duration)
    if WindUI then
        WindUI:Notify({
            Title = title,
            Content = content,
            Duration = duration or 5
        })
    end
end

-- Fungsi untuk mendapatkan Character dan Humanoid LocalPlayer dengan aman
local function getCharacter()
    local playerChar = LocalPlayer.Character
    if not playerChar or not playerChar.Parent then return nil, nil end
    local humanoid = playerChar:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return nil, nil end
    return playerChar, humanoid
end

-- Fungsi untuk menjalankan FireServer dengan aman (menghindari error)
function safeFireServer(remote, ...)
    if remote then pcall(remote.FireServer, remote, ...) end
end

--[[ 5. MAIN FEATURE MODULES ]]

--- 5.1. Auto Farm Logic ---
local function getRakeDistance()
    if Rake and Rake.Parent and Rake:FindFirstChild("HumanoidRootPart") then
        local playerChar, _ = getCharacter()
        if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
            return (playerChar.HumanoidRootPart.Position - Rake.HumanoidRootPart.Position).Magnitude
        end
    end
    return math.huge
end

local function smartMoveTo(destination, targetInstance)
    local playerChar, humanoid = getCharacter()
    if not playerChar then return false end

    local path = PathfindingService:CreatePath()
    local success, errorMessage = pcall(function()
        path:ComputeAsync(playerChar.HumanoidRootPart.Position, destination)
    end)

    if success and path.Status == Enum.PathStatus.Success then
        for _, waypoint in ipairs(path:GetWaypoints()) do
            if targetInstance and not targetInstance.Parent then
                notify("Auto Farm", "Target disappeared! Finding new one.", 3)
                return false
            end
            
            if not Toggles.AutoFarm or (isCurrentlyFleeing == false and getRakeDistance() < DANGER_DISTANCE) then
                humanoid:MoveTo(humanoid.Parent.HumanoidRootPart.Position)
                return false
            end

            humanoid:MoveTo(waypoint.Position)
            local moveSuccess = humanoid.MoveToFinished:Wait(8)

            if not moveSuccess then
                notify("Auto Farm", "Stuck detected! Finding new target...", 3)
                humanoid:MoveTo(humanoid.Parent.HumanoidRootPart.Position)
                return "stuck"
            end
        end
        return true
    else
        humanoid:MoveTo(destination)
        local moveSuccess = humanoid.MoveToFinished:Wait(8)
        if not moveSuccess then return "stuck" end
        return true
    end
end

local function isPositionInForbiddenZone(position)
    local forbiddenZones = {
        {part = Workspace.Map:FindFirstChild("ObservationTower"), radius = 70},
        {part = Workspace.Map:FindFirstChild("SafeHouse"), radius = 60},
        {part = Workspace.Map:FindFirstChild("BaseCamp"), radius = 60}
    }
    for _, zone in ipairs(forbiddenZones) do
        if zone.part and zone.part:FindFirstChild("PrimaryPart") then
            if (position - zone.part.PrimaryPart.Position).Magnitude < zone.radius then
                return true
            end
        end
    end
    return false
end

local function findSafestFleeSpot(ignoreList)
    ignoreList = ignoreList or {}
    local farthestPlayer, maxDist = nil, -1
    if not Rake or not Rake.Parent then return nil, nil end
    
    local rakePos = Rake.HumanoidRootPart.Position
    for _, player in ipairs(Players:GetPlayers()) do
        if not table.find(ignoreList, player) and player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerPos = player.Character.HumanoidRootPart.Position
            if not isPositionInForbiddenZone(playerPos) then
                local dist = (rakePos - playerPos).Magnitude
                if dist > maxDist then
                    maxDist = dist
                    farthestPlayer = player
                end
            end
        end
    end

    if farthestPlayer then
        local myPos = LocalPlayer.Character.HumanoidRootPart.Position
        local playerPos = farthestPlayer.Character.HumanoidRootPart.Position
        local direction = (playerPos - myPos).Unit
        local fleePoint = playerPos - (direction * 60)
        return fleePoint, farthestPlayer
    end

    return nil, nil
end

local function findSafestSpot(ignoreList)
    local playerFleePoint, targetPlayer = findSafestFleeSpot(ignoreList and ignoreList.players)
    if targetPlayer then
        return playerFleePoint, targetPlayer, "player"
    end

    local safeSpots = {
        {name = "SafeHouse", part = Workspace.Map.SafeHouse.PrimaryPart},
        {name = "BaseCamp", part = Workspace.Map.BaseCamp.PrimaryPart},
        {name = "ObservationTower", part = Workspace.Map.ObservationTower.PrimaryPart}
    }
    
    local closestSpot, minDist = nil, math.huge
    local myPos = LocalPlayer.Character.HumanoidRootPart.Position

    for _, spot in ipairs(safeSpots) do
        if spot.part and not (ignoreList and ignoreList.spots and table.find(ignoreList.spots, spot.name)) then
            local dist = (myPos - spot.part.Position).Magnitude
            if dist < minDist then
                minDist = dist
                closestSpot = spot
            end
        end
    end

    if closestSpot then
        local direction = (closestSpot.part.Position - myPos).Unit
        local fleePoint = closestSpot.part.Position - (direction * 60)
        return fleePoint, closestSpot, "spot"
    end

    return nil, nil, nil
end

local function findClosestScrap()
    local closestScrap, minDist = nil, math.huge
    local playerChar, _ = getCharacter()
    if not playerChar then return nil end
    
    local myPos = playerChar.HumanoidRootPart.Position
    for _, folder in ipairs(Workspace.Filter.ScrapSpawns:GetChildren()) do
        for _, scrapModel in ipairs(folder:GetChildren()) do
            if scrapModel:IsA("Model") and scrapModel:FindFirstChild("Scrap") and not blacklistedTargets[scrapModel] then
                local dist = (myPos - scrapModel.Scrap.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    closestScrap = scrapModel
                end
            end
        end
    end
    return closestScrap
end

local function sellScraps()
    local shopPart = Workspace.Map.Shack.Merchant.Head
    if not shopPart then
        notify("Auto Farm", "Shop not found!")
        return
    end
    
    notify("Auto Farm", "Daytime. Moving to shop...")
    local reached = smartMoveTo(shopPart.Position, shopPart)
    
    if not reached then
        notify("Auto Farm", "Failed to reach the shop.")
    else
        task.wait(1)
        notify("Auto Farm", "Selling scraps...")
        ReplicatedStorage.ShopEvent:FireServer("SellScraps", "Scraps")
        task.wait(1)
        notify("Auto Farm", "Scraps have been sold successfully!")
        task.wait(2)
    end
end

local function startAutoFarm()
    currentTarget = nil
    isCurrentlyFleeing = false
    blacklistedTargets = {}
    local blacklistedFleeTargets = {players = {}, spots = {}}
    local lastFleeTarget = nil

    while Toggles.AutoFarm do
        task.wait(0.2)
        
        local playerChar, humanoid = getCharacter()
        if not playerChar then continue end

        local isDay = Lighting.ClockTime >= 6 and Lighting.ClockTime < 18

        if not isDay and getRakeDistance() < DANGER_DISTANCE then
            if not isCurrentlyFleeing then
                isCurrentlyFleeing = true
                Toggles.NoSlowDown = true
                blacklistedFleeTargets = {players = {}, spots = {}}
            end

            if lastFleeTarget then
                if lastFleeTarget.type == "player" then
                    table.insert(blacklistedFleeTargets.players, lastFleeTarget.target)
                elseif lastFleeTarget.type == "spot" then
                    table.insert(blacklistedFleeTargets.spots, lastFleeTarget.target.name)
                end
            end

            local fleeDestination, fleeTarget, fleeType = findSafestSpot(blacklistedFleeTargets)
            
            if fleeTarget then
                lastFleeTarget = {target = fleeTarget, type = fleeType}
                local targetName = fleeType == "player" and fleeTarget.Name or fleeTarget.name
                notify("Auto Farm", "Rake detected! Fleeing towards " .. targetName, 3)
                local moveResult = smartMoveTo(fleeDestination, nil)
                if moveResult == "stuck" then
                    notify("Auto Farm", "Stuck while fleeing! Finding new escape route.", 3)
                end
            else
                notify("Auto Farm", "No safe spots found! Resetting and running randomly.", 3)
                blacklistedFleeTargets = {players = {}, spots = {}}
                lastFleeTarget = nil
                humanoid:MoveTo(humanoid.Parent.HumanoidRootPart.Position + Vector3.new(math.random(-50,50), 0, math.random(-50,50)))
            end
            continue
        end

        if isCurrentlyFleeing then
            isCurrentlyFleeing = false
            Toggles.NoSlowDown = false
            humanoid:MoveTo(humanoid.Parent.HumanoidRootPart.Position) -- Stop current movement
            lastFleeTarget = nil
            
            notify("Auto Farm", "Safe from The Rake. Resuming operations...", 3)
        end

        if isDay and not hasSoldToday then
            sellScraps()
            hasSoldToday = true
        end
        
        if not isDay then hasSoldToday = false end
        
        if not currentTarget or not currentTarget.Parent then
            local targetScrap = findClosestScrap()
            if targetScrap then
                currentTarget = targetScrap
            else
                if tick() - lastStatusNotify > notifyCooldown then
                    notify("Auto Farm", "No scraps found. Waiting...", 3)
                    lastStatusNotify = tick()
                end
                continue
            end
        end

        if currentTarget and currentTarget.Parent then
            local moveResult = smartMoveTo(currentTarget.Scrap.Position, currentTarget)
            if moveResult == "stuck" or not moveResult then
                blacklistedTargets[currentTarget] = true
                currentTarget = nil
            else
                notify("Auto Farm", "Scrap collected! Finding next scrap...", 2)
                currentTarget = nil
                task.wait(1)
                blacklistedTargets = {}
            end
        end
    end
end

--- 5.2. ESP & Visuals Logic ---
function toggleHighlight(target, name, parentPart, color, state, humanoid)
    if not target or (state and (not parentPart or not parentPart:IsDescendantOf(game))) then return end
    local espKey = target
    if state then
        if ActiveESPElements[espKey] then
            local billboard = ActiveESPElements[espKey][2]
            if humanoid and billboard and not billboard:FindFirstChild("ESP_HealthBarBG") then
                billboard.Size = UDim2.new(5, 0, 2.5, 0)
                local textLabel = billboard:FindFirstChild("ESP_TextLabel")
                if textLabel then textLabel.Size = UDim2.new(1, 0, 0.6, 0) end
                local healthBarBG = Instance.new("Frame", billboard); healthBarBG.Name = "ESP_HealthBarBG"; healthBarBG.Size = UDim2.new(1, 0, 0.15, 0); healthBarBG.Position = UDim2.new(0,0,0.7,0); healthBarBG.BackgroundColor3 = Color3.fromRGB(200,0,0); healthBarBG.BorderSizePixel = 0
                local healthBarFG = Instance.new("Frame", healthBarBG); healthBarFG.Name = "ESP_HealthBarFG"; healthBarFG.Size = UDim2.new(1, 0, 1, 0); healthBarFG.BackgroundColor3 = Color3.fromRGB(0,255,0); healthBarFG.BorderSizePixel = 0
            end
            return
        end
        local highlight = Instance.new("Highlight"); highlight.FillColor = color or Color3.new(1, 1, 1); highlight.OutlineColor = Color3.new(1, 1, 1); highlight.Adornee = target; highlight.Parent = target
        local billboardGui = Instance.new("BillboardGui"); billboardGui.Name = "ESP_Billboard"; billboardGui.Size = UDim2.new(5, 0, 2, 0); billboardGui.StudsOffset = Vector3.new(0, 3, 0); billboardGui.AlwaysOnTop = true; billboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; billboardGui.Parent = parentPart
        local textLabel = Instance.new("TextLabel", billboardGui); textLabel.Name = "ESP_TextLabel"; textLabel.Size = UDim2.new(1, 0, 1, 0); textLabel.Position = UDim2.new(0,0,0,0); textLabel.BackgroundTransparency = 1; textLabel.TextColor3 = color or Color3.new(1, 1, 1); textLabel.Font = Enum.Font.SourceSansBold; textLabel.TextSize = 16; textLabel.Text = name
        local stroke = Instance.new("UIStroke", textLabel); stroke.Color = Color3.new(0,0,0); stroke.Thickness = 1.5
        if humanoid then
            billboardGui.Size = UDim2.new(5, 0, 2.5, 0); textLabel.Size = UDim2.new(1, 0, 0.6, 0)
            local healthBarBG = Instance.new("Frame", billboardGui); healthBarBG.Name = "ESP_HealthBarBG"; healthBarBG.Size = UDim2.new(1, 0, 0.15, 0); healthBarBG.Position = UDim2.new(0,0,0.7,0); healthBarBG.BackgroundColor3 = Color3.fromRGB(200,0,0); healthBarBG.BorderSizePixel = 0
            local healthBarFG = Instance.new("Frame", healthBarBG); healthBarFG.Name = "ESP_HealthBarFG"; healthBarFG.Size = UDim2.new(1, 0, 1, 0); healthBarFG.BackgroundColor3 = Color3.fromRGB(0,255,0); healthBarFG.BorderSizePixel = 0
        end
        ActiveESPElements[espKey] = {highlight, billboardGui}
    else
        if ActiveESPElements[espKey] then for _, element in ipairs(ActiveESPElements[espKey]) do if element and element.Parent then element:Destroy() end end; ActiveESPElements[espKey] = nil end
    end
end

function updatePlayersESP(state)
    Toggles.PlayersESP = state;
    if not state then
        for _, p in ipairs(Players:GetPlayers()) do
            if p.Character then toggleHighlight(p.Character, "", nil, nil, false) end
        end
    end
end

function updateScrapESP(state)
    Toggles.ScrapESP = state;
    if not state then
        for _, f in ipairs(Workspace.Filter.ScrapSpawns:GetChildren()) do
            for _, i in ipairs(f:GetChildren()) do
                if i:IsA("Model") then toggleHighlight(i, "", nil, nil, false) end
            end
        end
    end
end

function updatePlaceESP(state)
    Toggles.PlaceESP = state
    local places = {
        powerstation = {part = Workspace.Map.PowerStation:FindFirstChildWhichIsA("BasePart", true), color = Color3.fromRGB(255, 255, 0)},
        safehouse = {part = Workspace.Map.SafeHouse.RakeBreak.Touch1, color = Color3.fromRGB(0, 255, 255)},
        observationtower = {part = Workspace.Map.ObservationTower:FindFirstChildWhichIsA("BasePart", true), color = Color3.fromRGB(255, 170, 0)},
        shop = {part = Workspace.Map.Shack.Merchant.Head, color = Color3.fromRGB(0, 255, 0)},
        basecamp = {part = Workspace.Map.BaseCamp:FindFirstChildWhichIsA("BasePart", true), color = Color3.fromRGB(255, 0, 255)}
    }
    for name, data in pairs(places) do
        if state then
            if data.part then toggleHighlight(data.part, name:upper(), data.part, data.color, true) end
        else
            if data.part then toggleHighlight(data.part, "", nil, nil, false) end
        end
    end
end

--- 5.3. Environment & Player Mods ---
function setFullBright(state)
    if state then
        colorCorrection.Enabled = true;
        Lighting.FogEnd = 999999;
        Lighting.OutdoorAmbient = Color3.fromRGB(200, 200, 200);
        Lighting.Ambient = Color3.fromRGB(200, 200, 200);
        colorCorrection.Saturation = 0
    else
        Lighting.FogEnd = originalLighting.FogEnd;
        Lighting.OutdoorAmbient = originalLighting.OutdoorAmbient;
        Lighting.Ambient = originalLighting.Ambient;
        colorCorrection.Saturation = originalColorCorrection.Saturation;
        colorCorrection.Enabled = originalColorCorrection.Enabled
    end
end

function toggleMouseLock()
    isMouseLocked = not isMouseLocked;
    UserInputService.MouseBehavior = isMouseLocked and Enum.MouseBehavior.LockCenter or Enum.MouseBehavior.Default
end

--- 5.4. Client & System Hooks ---
local function setupPassiveHooks()
    pcall(function()
        local hookedModules = {}
        local function isModuleHooked(module) for _, m in ipairs(hookedModules) do if m == module then return true end end; return false end
        local function hookStaminaModule()
            local getloadedmodules = getloadedmodules or get_signal_cons
            for _, module in ipairs(getloadedmodules()) do
                if module.Name == "M_H" and not isModuleHooked(module) then
                    local success, moduleScript = pcall(require, module)
                    if success and moduleScript and moduleScript.TakeStamina then
                        table.insert(hookedModules, module)
                        local oldTakeStamina = moduleScript.TakeStamina
                        moduleScript.TakeStamina = function(self, amount) if amount > 0 then return oldTakeStamina(self, -0.5) end; return oldTakeStamina(self, amount) end
                        print("Infinite Stamina Activated.")
                    end
                end
            end
        end
        local function disableAntiCheat()
            local getconnections = getconnections or get_signal_cons
            if ReplicatedStorage:FindFirstChild("TKSMNA") and ReplicatedStorage.TKSMNA:FindFirstChild("Event") then
                for _, connection in ipairs(getconnections(ReplicatedStorage.TKSMNA.Event)) do if connection.Connected then connection:Disconnect() end end
            end
        end
        disableAntiCheat(); hookStaminaModule(); LocalPlayer.CharacterAdded:Connect(function() task.wait(1); hookStaminaModule() end)
    end)
end

task.spawn(function() -- Anti-AFK
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Nadir3709/Anti-Afk/main/Script"))()
        notify("Skedz Hub", "Anti-AFK automatically activated.")
    end)
end)

--[[ 6. UI CONSTRUCTION (WindUI) ]]
local Window = WindUI:CreateWindow({
    Title = "Skedz Hub",
    Icon = "worm",
    Author = GameName,
    Folder = "Skedz Hub",
    Size = UDim2.fromOffset(600, 100), -- Ukuran disesuaikan agar lebih proporsional
    SideBarWidth = 150,
    Theme = "Dark",
    HideSearchBar = true,
})

--// Tab Definitions
local PlayerTab = Window:Tab({ Title = "Player", Icon = "user-round" })
local VisualsTab = Window:Tab({ Title = "Visuals", Icon = "eye" })
local EnvironmentTab = Window:Tab({ Title = "Environment", Icon = "globe" })
local MiscTab = Window:Tab({ Title = "Misc", Icon = "layout-grid" })
local SettingsTab = Window:Tab({ Title = "Settings", Icon = "settings" })
local CreditsTab = Window:Tab({ Title = "Credits", Icon = "users" })
Window:SelectTab(1)

--// Player Tab Content
PlayerTab:Section({ Title = "Auto Farm" })
PlayerTab:Toggle({
    Title = "Auto Farm Scraps",
    Desc = "Automatically collects scraps and avoids The Rake.",
    Callback = function(state)
        Toggles.AutoFarm = state
        if not isUIInitialized then return end -- [FIX] Jangan jalankan notif jika UI belum selesai dibuat

        if state then
            task.spawn(startAutoFarm)
            notify("Auto Farm", "Auto Farm has been enabled.")
        else
            notify("Auto Farm", "Auto Farm has been disabled.")
            currentTarget = nil
            isCurrentlyFleeing = false
            blacklistedTargets = {}
            print("Auto Farm Blacklist has been cleared.")
            if Toggles.NoSlowDown then Toggles.NoSlowDown = false end
            local playerChar, humanoid = getCharacter()
            if humanoid then
                humanoid:MoveTo(humanoid.Parent.HumanoidRootPart.Position)
            end
        end
    end
})

PlayerTab:Paragraph({
    Title = "BETA",
    Desc = "This auto farm feature is still in development, there may be some bugs if it is activated for too long, use it if you only want to AFK for a while."
})

PlayerTab:Section({ Title = "Combat" })
PlayerTab:Toggle({
    Title = "StunStick Aura",
    Desc = "Automatically attack the Rake.",
    Callback = function(s) Toggles.StunStickAura = s end
})

PlayerTab:Section({ Title = "Movement" })
PlayerTab:Toggle({
    Title = "No SlowDown",
    Desc = "Keeps your run speed at 26.",
    Callback = function(s) Toggles.NoSlowDown = s end
})
PlayerTab:Button({
    Title = "Disable Fall Damage",
    Desc = "PERMANENT for this session.\nRejoin to disable.",
    Callback = function()
        local fdEvent = ReplicatedStorage:FindFirstChild("FD_Event")
        if fdEvent then
            pcall(fdEvent.Destroy, fdEvent)
            notify("Anti-Fall Damage", "Fall Damage has been permanently disabled.")
        else
            notify("Anti-Fall Damage", "Already disabled or not found.")
        end
    end
})

PlayerTab:Section({ Title = "Interaction" })
PlayerTab:Toggle({
    Title = "Auto Open Door (on E)",
    Desc = "Automatically open Safe House door on E press.",
    Callback = function(s) Toggles.AutoOpenDoor = s end
})
PlayerTab:Toggle({
    Title = "Auto Open LootBox",
    Desc = "Automatically open Supply Crates.",
    Callback = function(s) Toggles.AutoOpenLootBox = s end
})
PlayerTab:Button({
    Title = "Open Safe House Door",
    Desc = "Manual button for Mobile players.",
    Callback = function()
        Workspace.Map.SafeHouse.Door.RemoteEvent:FireServer("Door")
        notify("Action", "Attempting to open door.")
    end
})

--// Visuals Tab Content
VisualsTab:Section({ Title = "Entity ESP" })
VisualsTab:Toggle({ Title = "Players ESP", Desc = "Show other players, health & distance.", Callback = updatePlayersESP })
VisualsTab:Toggle({
    Title = "Rake ESP",
    Desc = "Show the Rake's location & health.",
    Callback = function(s)
        Toggles.RakeESP = s;
        if not s and Rake then toggleHighlight(Rake, "", nil, nil, false, nil) end
    end
})

VisualsTab:Section({ Title = "Item ESP" })
VisualsTab:Toggle({ Title = "Scrap ESP", Desc = "Show Scrap locations & distance.", Callback = updateScrapESP })
VisualsTab:Toggle({
    Title = "LootBox ESP",
    Desc = "Show Supply Crates & distance.",
    Callback = function(s)
        Toggles.LootBoxESP = s;
        if not s then
            for _, box in ipairs(Workspace.Debris.SupplyCrates:GetChildren()) do
                toggleHighlight(box, "", nil, nil, false)
            end
        end
    end
})
VisualsTab:Toggle({
    Title = "FlareGun ESP",
    Desc = "Show the Flare Gun & distance.",
    Callback = function(s)
        Toggles.FlareGunESP = s;
        if not s then
            local fg = Workspace:FindFirstChild("FlareGunPickUp");
            if fg then toggleHighlight(fg.FlareGun, "", nil, nil, false) end
        end
    end
})

VisualsTab:Section({ Title = "World & UI ESP" })
VisualsTab:Toggle({ Title = "Place ESP", Desc = "Show important locations.", Callback = updatePlaceESP })
VisualsTab:Toggle({
    Title = "Show Game Info",
    Desc = "Shows a separate game info window.",
    Default = false,
    Callback = function(s) Toggles.InfoGUI = s end
})

--// Environment Tab Content
EnvironmentTab:Section({ Title = "World Visuals" })
EnvironmentTab:Toggle({
    Title = "Full Bright",
    Desc = "Brightens the entire map.",
    Callback = function(s) Toggles.FullBright = s end
})

EnvironmentTab:Section({ Title = "Farming / Exploits" })
EnvironmentTab:Button({
    Title = "Sell Scraps (Points)",
    Desc = "Must be near the shop to work.",
    Callback = function() ReplicatedStorage.ShopEvent:FireServer("SellScraps", "Scraps") end
})

--// Misc Tab Content
MiscTab:Section({ Title = "Server Actions" })
MiscTab:Button({
    Title = "Rejoin",
    Desc = "Rejoins the current server.",
    Callback = function() TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId) end,
})
MiscTab:Button({
    Title = "Server Hop",
    Desc = "Finds and joins a different server.",
    Callback = function()
        local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"));
        for _, server in ipairs(servers.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id);
                return
            end
        end;
        notify("Server Hop", "No other servers found.")
    end,
})

MiscTab:Section({ Title = "Client Tweaks" })
MiscTab:Toggle({
    Title = "Unlock FPS",
    Desc = "Removes the 60 FPS cap for smoother gameplay.",
    Callback = function(state)
        Toggles.UnlockFPS = state;
        if not isUIInitialized then return end
        if setfpscap then
            setfpscap(state and 999 or 60);
            notify("FPS Cap set to " .. (state and "Unlocked" or "60"))
        else
            notify("Client Tweaks", "Your executor does not support setfpscap.")
        end
    end,
})

--// Settings Tab Content
SettingsTab:Section({ Title = "UI Settings" })
SettingsTab:Keybind({
    Title = "Toggle UI Key",
    Desc = "Set a key to open/close this menu.",
    Value = "RightControl",
    Callback = function(key)
        Window:SetToggleKey(Enum.KeyCode[key]);
        notify("Settings", "UI Toggle Key set to " .. key)
    end
})
SettingsTab:Button({
    Title = "Unlock / Lock Mouse",
    Desc = "Toggles mouse between camera and cursor.\nDefault unlock key is RightShift.",
    Callback = toggleMouseLock
})

--// Credits Tab Content
CreditsTab:Section({ Title = "Development" })
CreditsTab:Paragraph({ Title = "Author", Desc = "- Nadir" })
CreditsTab:Paragraph({ Title = "UI Library", Desc = "- Wind UI by Footagesus" })
CreditsTab:Paragraph({ Title = "Hub", Desc = "- Skedz Hub" })

CreditsTab:Section({ Title = "Community" })
CreditsTab:Button({
    Title = "Discord Server",
    Desc = "Click to copy the invite link for Skedz Hub.",
    Callback = function()
        if setclipboard then
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Skedzz/Misc/refs/heads/main/Credits/DiscordServer"))()
            notify("Credits", "Discord invite link copied to clipboard!")
        else
            notify("Credits", "Your executor does not support setclipboard.")
        end
    end,
})

-- [FIX] Tandai bahwa UI sudah selesai dibuat setelah semua elemen di-render
isUIInitialized = true

--[[ 7. EVENT LOOPS & LISTENERS ]]

--- 7.1. Info GUI Manager ---
task.spawn(function()
    while task.wait(0.5) do
        if Toggles.InfoGUI and not InfoGuiInstance then
            InfoGuiInstance = Instance.new("ScreenGui", LocalPlayer.PlayerGui); InfoGuiInstance.Name = "SkedzHubInfoGUI"; InfoGuiInstance.ResetOnSpawn = false
            local frame = Instance.new("Frame", InfoGuiInstance); frame.Size = UDim2.new(0, 220, 0, 90); frame.Position = UDim2.new(0, 10, 0.5, 0); frame.BackgroundColor3 = Color3.new(0.1,0.1,0.1); frame.BackgroundTransparency = 0.3; frame.Draggable = true; frame.Active = true
            local padding = Instance.new("UIPadding", frame); padding.PaddingLeft = UDim.new(0, 10); local corner = Instance.new("UICorner", frame); corner.CornerRadius = UDim.new(0, 5)
            local list = Instance.new("UIListLayout", frame); list.Padding = UDim.new(0,5); list.SortOrder = Enum.SortOrder.LayoutOrder
            local title = Instance.new("TextLabel", frame); title.Size = UDim2.new(1,0,0,20); title.BackgroundTransparency = 1; title.TextColor3 = Color3.fromRGB(0,170,255); title.Text = "--- GAME INFO ---"; title.Font = Enum.Font.SourceSansBold; title.TextSize = 16
            local function createLabel() local label = Instance.new("TextLabel", frame); label.Size = UDim2.new(1,0,0,18); label.BackgroundTransparency = 1; label.TextColor3 = Color3.new(1,1,1); label.Font=Enum.Font.SourceSans; label.TextSize = 15; label.TextXAlignment = Enum.TextXAlignment.Left; return label end
            local targetLabel, powerLabel, timerLabel = createLabel(), createLabel(), createLabel()
            
            if infoGuiUpdateLoop then infoGuiUpdateLoop:Disconnect() end
            infoGuiUpdateLoop = RunService.RenderStepped:Connect(function()
                if not InfoGuiInstance or not InfoGuiInstance.Parent then infoGuiUpdateLoop:Disconnect(); return end
                local targetVal = Rake and Rake:FindFirstChild("TargetVal") and Rake.TargetVal.Value
                local powerVal = ReplicatedStorage:FindFirstChild("PowerValues") and ReplicatedStorage.PowerValues:FindFirstChild("PowerLevel")
                local timerVal = ReplicatedStorage:FindFirstChild("Timer")
                targetLabel.Text = ("RAKE TARGET : " .. tostring((targetVal and targetVal.Parent and targetVal.Parent.Name) or "N/A")):upper()
                powerLabel.Text = ("POWER LEVEL : " .. tostring((powerVal and powerVal.Value) or "N/A")):upper()
                timerLabel.Text = ("TIME REMAINING : " .. tostring((timerVal and timerVal.Value) or "N/A"))
            end)
        elseif not Toggles.InfoGUI and InfoGuiInstance then
            if infoGuiUpdateLoop then infoGuiUpdateLoop:Disconnect() end
            InfoGuiInstance:Destroy(); InfoGuiInstance = nil
        end
    end
end)

--- 7.2. Main Update Loop (RenderStepped) ---
RunService.RenderStepped:Connect(function()
    local playerChar, humanoid = getCharacter()
    if not playerChar or not humanoid then return end
    local myPos = playerChar.HumanoidRootPart.Position

    -- Handle Active Toggles
    setFullBright(Toggles.FullBright)
    if Toggles.NoSlowDown then humanoid.WalkSpeed = 26 end
    if Toggles.AutoOpenLootBox then for _, box in pairs(Workspace.Debris.SupplyCrates:GetChildren()) do box.UnlockValue.Value = 100 end end
    if Toggles.StunStickAura and Rake and Rake.Parent and Rake:FindFirstChild("Head") then
        local ss = playerChar:FindFirstChild("StunStick");
        if ss and tick() - lastStunHit >= 0.2 then
            lastStunHit = tick();
            task.spawn(function() safeFireServer(ss.Event, "S"); task.wait(0.01); safeFireServer(ss.Event, "H", Rake.Head) end)
        end
    end

    -- Update ESP elements (distance, health, etc.)
    for target, elements in pairs(ActiveESPElements) do
        local isPlaceESP = typeof(target) == "string"; if isPlaceESP then target = elements[1].Adornee end
        if not target or not target.Parent then toggleHighlight(target, "", nil, nil, false); if isPlaceESP and target then target:Destroy() end; continue end
        local billboard = elements[2]; if not billboard or not billboard.Parent then toggleHighlight(target, "", nil, nil, false); if isPlaceESP and target then target:Destroy() end; continue end
        local textLabel = billboard:FindFirstChild("ESP_TextLabel"); if not textLabel then continue end
        local targetPart = target:IsA("Model") and (target:FindFirstChild("HumanoidRootPart") or target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")) or target; if not targetPart then continue end
        local distance = (myPos - targetPart.Position).Magnitude
        textLabel.Text = textLabel.Text:gsub("%s%[.+%]", "") .. string.format(" [%.0fm]", distance)
        local healthBar = billboard:FindFirstChild("ESP_HealthBarBG"); if healthBar and target then local hum = target:FindFirstChildOfClass("Humanoid"); if hum then healthBar.ESP_HealthBarFG.Size = UDim2.new(hum.Health / hum.MaxHealth, 0, 1, 0) end end
    end

    -- Toggle ESP based on settings
    if Toggles.RakeESP and Rake and Rake.Parent and Rake:FindFirstChild("Head") then toggleHighlight(Rake, "RAKE", Rake.Head, Color3.new(1, 0, 0), true, Rake:FindFirstChildOfClass("Humanoid")) end
    if Toggles.ScrapESP then for _, f in ipairs(Workspace.Filter.ScrapSpawns:GetChildren()) do for _, i in ipairs(f:GetChildren()) do if i:IsA("Model") and i:FindFirstChild("Scrap") then toggleHighlight(i, i.Name:upper(), i.Scrap, Color3.new(1, 1, 0), true) end end end end
    if Toggles.PlayersESP then for _, p in ipairs(Players:GetPlayers()) do if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("Head") then toggleHighlight(p.Character, p.Name, p.Character.Head, Color3.new(0, 1, 1), true, p.Character:FindFirstChildOfClass("Humanoid")) end end end
    if Toggles.LootBoxESP then for _, b in ipairs(Workspace.Debris.SupplyCrates:GetChildren()) do if b:FindFirstChild("lid") and b.lid:FindFirstChild("1") then toggleHighlight(b, "LOOTBOX", b.lid["1"], Color3.new(1, 0.5, 0), true) end end end
    if Toggles.FlareGunESP then local fgp = Workspace:FindFirstChild("FlareGunPickUp"); if fgp and fgp:FindFirstChild("FlareGun") then toggleHighlight(fgp.FlareGun, "FLAREGUN", fgp.FlareGun, Color3.fromRGB(127, 0, 255), true) end end
    if Toggles.PlaceESP then updatePlaceESP(true) end
end)

--- 7.3. Input Listeners ---
UserInputService.InputBegan:Connect(function(input, gp)
    if not gp then
        if input.KeyCode == Enum.KeyCode.E and Toggles.AutoOpenDoor then
            safeFireServer(Workspace.Map.SafeHouse.Door.RemoteEvent, "Door")
        elseif input.KeyCode == Enum.KeyCode.RightShift then
            task.spawn(toggleMouseLock)
        end
    end
end)

--- 7.4. Workspace Listeners ---
Workspace.ChildAdded:Connect(function(child)
    if child.Name == "Rake" then Rake = child end
end)
Workspace.ChildRemoved:Connect(function(child)
    if child and child.Name == "Rake" and child == Rake then Rake = nil end
end)

--[[ 8. INITIALIZATION ]]
setupPassiveHooks()
Rake = Workspace:FindFirstChild("Rake")
Window:SetToggleKey(Enum.KeyCode.RightControl) -- Set initial toggle key
print("Skedz Hub Successfully loaded for " .. GameName)
