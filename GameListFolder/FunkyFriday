local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer
local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local PlayerName = player.DisplayName

local Version = "1.6.2"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

local Window = WindUI:CreateWindow({
    Title = "Nadir Hub â”‚ " .. GameName,
    Icon = "circle-user-round",
    Author = PlayerName,
    Size = UDim2.fromOffset(100, 100),
    Transparent = false,
    Theme = "Dark",
    SideBarWidth = 150,
})

local MainTab = Window:Tab({ Title = "Main", Icon = "house" })
Window:SelectTab(1)
local CreditsTab = Window:Tab({ Title = "Credits", Icon = "user-pen" })

CreditsTab:Button({
    Title = "Discord Server",
    Desc = "Link invite Nadir Hub",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Nadir3709/Credits/main/Discord"))()
    end,
})

CreditsTab:Paragraph({
    Title = "Author",
    Desc = "Nadir & Nioxsantana",
})

_G.auto = false
_G.Delay = 0.005
_G.Mode = "Static"

local Side
local holding = {}

local function CheckSide()
    pcall(function()
        local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        local minDistToLeft, minDistToRight = math.huge, math.huge

        for _, stage in pairs(workspace.Map.Stages:GetChildren()) do
            if stage:FindFirstChild("Teams") then
                local left = stage.Teams:FindFirstChild("Left")
                local right = stage.Teams:FindFirstChild("Right")

                if left then
                    local dist = (rootPart.Position - left.Position).Magnitude
                    if dist < minDistToLeft then minDistToLeft = dist end
                end

                if right then
                    local dist = (rootPart.Position - right.Position).Magnitude
                    if dist < minDistToRight then minDistToRight = dist end
                end
            end
        end

        Side = minDistToLeft < minDistToRight and "Left" or "Right"
    end)
end

MainTab:Toggle({
    Title = "Auto Player",
    Default = false,
    Callback = function(state)
        _G.auto = state
        if state then
            while _G.auto do
                pcall(function()
                    local ap = player.PlayerGui.Window.Game.Fields[Side].Inner
                    local columns = {
                        ap.Lane1.Notes:GetChildren(),
                        ap.Lane2.Notes:GetChildren(),
                        ap.Lane3.Notes:GetChildren(),
                        ap.Lane4.Notes:GetChildren(),
                        (ap:FindFirstChild("Lane5") and ap.Lane5.Notes:GetChildren()) or {},
                        (ap:FindFirstChild("Lane6") and ap.Lane6.Notes:GetChildren()) or {},
                        (ap:FindFirstChild("Lane7") and ap.Lane7.Notes:GetChildren()) or {},
                        (ap:FindFirstChild("Lane8") and ap.Lane8.Notes:GetChildren()) or {},
                        (ap:FindFirstChild("Lane9") and ap.Lane9.Notes:GetChildren()) or {},
                    }

                    local keys = {key1, key2, key3, key4, key5, key6, key7, key8, key9}

                    for i, notes in ipairs(columns) do
                        local key = keys[i]
                        if key and not holding[key] then
                            for _, note in ipairs(notes) do
                                if note:IsA("Frame") and note.Visible and note.Position.Y.Scale > (0.2 + _G.Delay) then
                                    coroutine.wrap(function()
                                        local tail = note:FindFirstChildWhichIsA("Frame")
                                        holding[key] = true
                                        VirtualInputManager:SendKeyEvent(true, key, false, game)

                                        if tail then
                                            local startY = tail.AbsolutePosition.Y
                                            local earlyReleaseDistance = 50
                                            local waitUntil = startY - earlyReleaseDistance

                                            while _G.auto and note:IsDescendantOf(game) do
                                                if not tail:IsDescendantOf(game) then break end
                                                if tail.AbsolutePosition.Y < waitUntil then break end
                                                task.wait()
                                            end
                                        else
                                            task.wait(0.04)
                                        end

                                        VirtualInputManager:SendKeyEvent(false, key, false, game)
                                        holding[key] = false
                                    end)()
                                    break
                                end
                            end
                        end
                    end
                end)
                task.wait()
            end
        end
    end
})

local Paragraph = MainTab:Paragraph({
    Title = "Auto Player Update.",
    Desc = "Maybe there are still some bugs for auto player in other songs / long notes arrow, I will improve it later.",
})

spawn(function()
    while task.wait() do
        if player.PlayerGui.GameGui.Windows.SongSelector.Visible then
            CheckSide()
        end
        pcall(function()
            local keymap = player.PlayerGui.Window.Game.Fields[Side].Inner
            key1 = Enum.KeyCode[keymap.Lane1.Labels.Label.Text.text]
            key2 = Enum.KeyCode[keymap.Lane2.Labels.Label.Text.text]
            key3 = Enum.KeyCode[keymap.Lane3.Labels.Label.Text.text]
            key4 = Enum.KeyCode[keymap.Lane4.Labels.Label.Text.text]
            key5 = Enum.KeyCode[keymap.Lane5.Labels.Label.Text.text]
            key6 = Enum.KeyCode[keymap.Lane6.Labels.Label.Text.text]
            key7 = Enum.KeyCode[keymap.Lane7.Labels.Label.Text.text]
            key8 = Enum.KeyCode[keymap.Lane8.Labels.Label.Text.text]
            key9 = Enum.KeyCode[keymap.Lane9.Labels.Label.Text.text]
        end)
    end
end)
