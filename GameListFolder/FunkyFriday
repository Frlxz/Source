--====================================================================================================================--
--[ WindUI Library & Services ]
--[ Open Source ]
--====================================================================================================================--
local Version = "1.6.3"
local WindUI =
    loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local VirtualUser = game:GetService("VirtualUser")

local LocalPlayer = Players.LocalPlayer
local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

--====================================================================================================================--
--[ UI SETUP ]
--====================================================================================================================--

local Window =
    WindUI:CreateWindow(
    {
        Title = "Skedz Hub",
        Icon = "worm",
        Author = GameName,
        Folder = "Skedz Hub",
        Size = UDim2.fromOffset(580, 100),
        SideBarWidth = 150,
        Theme = "Dark",
        HideSearchBar = true
    }
)

--// Deklarasi Tab-Tab
local MainTab = Window:Tab({Title = "Auto Player", Icon = "play"})
local MiscTab = Window:Tab({Title = "Misc", Icon = "layout-grid"})
local CreditsTab = Window:Tab({Title = "Credits", Icon = "users"})

Window:SelectTab(1)

--====================================================================================================================--
--[ FUNGSI & LOGIKA AUTO PLAYER ]
--====================================================================================================================--

_G.auto = false
_G.Delay = 0
_G.ToggledBeforeMenuOpen = false
_G.AntiAFK = true

local isCurrentlyPlaying = false
local Side = nil
local keymap = {key1, key2, key3, key4, key5, key6, key7, key8, key9}

function IsPlayerInSong()
    local gameWindow = LocalPlayer.PlayerGui:FindFirstChild("Window")
    if gameWindow and gameWindow:FindFirstChild("Game") and gameWindow.Game.Visible then
        if gameWindow.Game:FindFirstChild("Fields") and Side and LocalPlayer.PlayerGui.Window.Game.Fields[Side] then
            return true
        end
    end
    return false
end

function CheckSide()
    pcall(
        function()
            local character = LocalPlayer.Character
            local rootPart = character and character:FindFirstChild("HumanoidRootPart")
            if not rootPart then
                return
            end
            local minDistToLeft, minDistToRight = math.huge, math.huge
            for _, stage in pairs(workspace.Map.Stages:GetChildren()) do
                if stage:FindFirstChild("Teams") then
                    local left = stage.Teams:FindFirstChild("Left")
                    local right = stage.Teams:FindFirstChild("Right")
                    if left then
                        local dist = (rootPart.Position - left.Position).Magnitude
                        if dist < minDistToLeft then
                            minDistToLeft = dist
                        end
                    end
                    if right then
                        local dist = (rootPart.Position - right.Position).Magnitude
                        if dist < minDistToRight then
                            minDistToRight = dist
                        end
                    end
                end
            end
            Side = minDistToLeft < minDistToRight and "Left" or "Right"
        end
    )
end

local function setupColumns(side)
    local columns = {}
    pcall(
        function()
            local ap = LocalPlayer.PlayerGui.Window.Game.Fields[side].Inner
            for i = 1, 9 do
                pcall(
                    function()
                        if ap and ap["Lane" .. i] then
                            columns[i] = ap["Lane" .. i].Notes
                        end
                    end
                )
            end
        end
    )
    return columns
end

local function autoplay()
    while _G.auto and isCurrentlyPlaying do
        pcall(
            function()
                local columns = setupColumns(Side)
                local trackedChildren = {}
                local activationThreshold = 0.4 + 1e-9 + _G.Delay
                for columnNum, column in pairs(columns) do
                    pcall(
                        function()
                            trackedChildren[columnNum] = {}
                            for _, child in ipairs(column:GetChildren()) do
                                pcall(
                                    function()
                                        if child:IsA("GuiObject") and child.Position.Y.Scale > activationThreshold then
                                            trackedChildren[columnNum][child] = true
                                            VirtualInputManager:SendKeyEvent(true, keymap[columnNum], false, game)
                                        end
                                    end
                                )
                            end
                        end
                    )
                end
                while _G.auto and isCurrentlyPlaying do
                    pcall(
                        function()
                            for columnNum, column in pairs(columns) do
                                pcall(
                                    function()
                                        for _, child in ipairs(column:GetChildren()) do
                                            pcall(
                                                function()
                                                    if
                                                        child:IsA("GuiObject") and not trackedChildren[columnNum][child] and
                                                            child.Position.Y.Scale > activationThreshold
                                                     then
                                                        trackedChildren[columnNum][child] = true
                                                        VirtualInputManager:SendKeyEvent(
                                                            true,
                                                            keymap[columnNum],
                                                            false,
                                                            game
                                                        )
                                                        if #child:GetChildren() == 2 then
                                                            coroutine.wrap(
                                                                function()
                                                                    pcall(
                                                                        function()
                                                                            while child.Parent and
                                                                                child.Position.Y.Scale >
                                                                                    activationThreshold and
                                                                                _G.auto and
                                                                                isCurrentlyPlaying do
                                                                                RunService.Heartbeat:Wait()
                                                                            end
                                                                            VirtualInputManager:SendKeyEvent(
                                                                                false,
                                                                                keymap[columnNum],
                                                                                false,
                                                                                game
                                                                            )
                                                                            trackedChildren[columnNum][child] = nil
                                                                        end
                                                                    )
                                                                end
                                                            )()
                                                        end
                                                    end
                                                end
                                            )
                                        end
                                        for child in pairs(trackedChildren[columnNum]) do
                                            pcall(
                                                function()
                                                    if
                                                        not child:IsDescendantOf(column) or
                                                            (child:IsA("GuiObject") and
                                                                child.Position.Y.Scale <= activationThreshold)
                                                     then
                                                        if trackedChildren[columnNum][child] then
                                                            VirtualInputManager:SendKeyEvent(
                                                                false,
                                                                keymap[columnNum],
                                                                false,
                                                                game
                                                            )
                                                        end
                                                        trackedChildren[columnNum][child] = nil
                                                    end
                                                end
                                            )
                                        end
                                    end
                                )
                            end
                            RunService.Heartbeat:Wait()
                        end
                    )
                end
            end
        )
    end
end

--====================================================================================================================--
--[ CONTENT TAB UI ]
--====================================================================================================================--

-----------------------
-- TAB AUTO PLAYER --
-----------------------
MainTab:Section({Title = "Main Control"})
MainTab:Toggle(
    {
        Title = "Enable Auto Player",
        Desc = "Activates automatically when a song starts.",
        Default = false,
        Callback = function(state)
            _G.auto = state
            if state then
                if not IsPlayerInSong() then
                    WindUI:Notify({Title = "Auto Player", Content = "Waiting for a song to start..."})
                end
            else
                isCurrentlyPlaying = false
                print("Auto Player fully disabled.")
            end
        end
    }
)
MainTab:Paragraph(
    {
        Title = "FYI (For Your Information)",
        Desc = "The script may not get 100% sick on certain songs.\n And please use downscroll for Auto Player."
    }
)

-----------------
-- TAB MISC --
-----------------
MiscTab:Section({Title = "Server Actions"})
MiscTab:Button(
    {Title = "Rejoin", Desc = "Rejoins the current server.", Callback = function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId)
        end}
)
MiscTab:Button(
    {
        Title = "Server Hop",
        Desc = "Finds and joins a different server.",
        Callback = function()
            local servers =
                HttpService:JSONDecode(
                game:HttpGet(
                    "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                )
            )
            for _, server in ipairs(servers.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id)
                    return
                end
            end
            WindUI:Notify({Title = "Server Hop", Content = "No other servers found."})
        end
    }
)
MiscTab:Section({Title = "Client Tweaks"})
MiscTab:Button(
    {Title = "Run Infinite Yield", Desc = "Executes the Infinite Yield admin script.", Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
        end}
)

--------------------
-- TAB CREDITS --
--------------------
CreditsTab:Section({Title = "Development"})
CreditsTab:Paragraph({Title = "Author", Desc = "- Nadir"})
CreditsTab:Paragraph({Title = "UI Library", Desc = "- Wind UI by Footagesus"})
CreditsTab:Paragraph({Title = "Hub", Desc = "- Skedz Hub"})
CreditsTab:Section({Title = "Community"})
CreditsTab:Button(
    {
        Title = "Discord Server",
        Desc = "Copies Discord Invite Link to clipboard.",
        Callback = function()
            if setclipboard then
                setclipboard("https://discord.gg/Nvhb3EnMDX")
                WindUI:Notify({Title = "Credits", Content = "Copied successfully!", Duration = 3})
            else
                WindUI:Notify(
                    {Title = "Credits", Content = "Your executor does not support setclipboard.", Duration = 5}
                )
            end
        end
    }
)

--====================================================================================================================--
--[ LOOP BACKGROUND & EVENTS ]
--====================================================================================================================--

GuiService.MenuOpened:Connect(
    function()
        if _G.auto then
            _G.ToggledBeforeMenuOpen = true
            WindUI:Notify({Title = "Auto Player", Content = "Paused while menu is open.", Duration = 0})
        end
    end
)
GuiService.MenuClosed:Connect(
    function()
        if _G.ToggledBeforeMenuOpen then
            _G.ToggledBeforeMenuOpen = false
        end
    end
)

task.spawn(
    function()
        while task.wait(0.25) do
            if _G.AntiAFK then
                pcall(
                    function()
                        VirtualUser:CaptureController()
                        VirtualUser:ClickButton2(Vector2.new())
                    end
                )
            end
            if
                LocalPlayer.PlayerGui:FindFirstChild("GameGui") and
                    LocalPlayer.PlayerGui.GameGui.Windows.SongSelector.Visible == true
             then
                CheckSide()
            end
            pcall(
                function()
                    if Side then
                        local keymap_path = LocalPlayer.PlayerGui.Window.Game.Fields[Side].Inner
                        for i = 1, 9 do
                            keymap[i] =
                                keymap_path:FindFirstChild("Lane" .. i) and
                                Enum.KeyCode[keymap_path["Lane" .. i].Labels.Label.Text.text] or
                                nil
                        end
                    end
                end
            )
        end
    end
)

task.spawn(
    function()
        while task.wait(0.5) do
            if _G.auto and not isCurrentlyPlaying and IsPlayerInSong() and not _G.ToggledBeforeMenuOpen then
                isCurrentlyPlaying = true
                WindUI:Notify({Title = "Auto Player", Content = "Song detected! Activating..."})
                coroutine.wrap(autoplay)()
            elseif isCurrentlyPlaying and not IsPlayerInSong() then
                isCurrentlyPlaying = false
            end
        end
    end
)

WindUI:Notify({Title = "Skedz Hub", Content = "Anti-AFK automatically activated.", Duration = 4})
